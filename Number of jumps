#include <stdio.h>
#include <limits.h>

int min(int a, int b) {
    return a < b ? a : b;
}

int minJumps(int arr[], int n) {
    int jumps[n]; // jumps[i] stores the minimum number of jumps required to reach arr[n-1] from arr[i]
    int i, j;

    if (n == 0 || arr[0] == 0) { // if the array is empty or the first element is 0, we can't reach the end
        return -1;
    }

    jumps[0] = 0;

    for (i = 1; i < n; i++) {
        jumps[i] = INT_MAX;
        for (j = 0; j < i; j++) {
            if (i <= j + arr[j] && jumps[j] != INT_MAX) { // if we can reach index i from index j and jumps[j] is not INT_MAX
                jumps[i] = min(jumps[i], jumps[j] + 1); // update jumps[i]
                break;
            }
        }
    }

    return jumps[n-1]; // return the minimum number of jumps required to reach the end
}

int main() {
    int arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9};
    int n = sizeof(arr) / sizeof(arr[0]);

    int min_jumps = minJumps(arr, n);

    if (min_jumps == -1) {
        printf("The end is not reachable.\n");
    } else {
        printf("The minimum number of jumps to reach the end is %d.\n", min_jumps);
    }

    return 0;
}
